@page "/BakePizza"
@using BackEndVGDelen.Models
@using BackEndVGDelen.Data
@inject BackEndContext _context
@inject NavigationManager NavManager
@using Microsoft.EntityFrameworkCore

@if (IngredientList != null)
{
    <form @onsubmit="() => SubmitForm(PizzaName, SelectedIngredients)">
        <h1>Create pizza</h1>
        <input id="input-pizzaName" @bind="PizzaName" type="text" name="pizzaName" placeholder="Give a name to your pizza" />

        @foreach (string category in new[] { "Dough", "Bottom-sauce", "Cheese", "Fish", "Chicken", "Meat", "Vegetables", "Sauces" })
        {
            <div class="ingredient-section">
                <div class="list-container">
                    <h2>@category</h2>
                    <ul class="ingredient-list">
                        @foreach (var ingredient in IngredientList.Where(i => i.Category == category))
                        {
                            <li>
                                <input type="checkbox" name="ingredients" value="@ingredient.IngredientID" id="@ingredient.IngredientID" @onchange="() => UpdateSelectedIngredients(ingredient)">
                                <label for="@ingredient.IngredientID">@ingredient.IngredientName</label>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }

        <div class="bakeButton">
            <button type="submit">Bake and upload</button>
        </div>
    </form>
}

@code {
    private string PizzaName { get; set; }
    public List<Ingredient> IngredientList { get; set; }
    public List<Ingredient> SelectedIngredients { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IngredientList = await _context.Ingredients.ToListAsync();
        SelectedIngredients = new List<Ingredient>();
    }

    private void UpdateSelectedIngredients(Ingredient ingredient)
    {
        if (SelectedIngredients.Contains(ingredient))
        {
            SelectedIngredients.Remove(ingredient);
        }
        else
        {
            SelectedIngredients.Add(ingredient);
        }
    }

    private void SubmitForm(string pizzaName, List<Ingredient> ingredients)
    {
        var newPizza = new Pizza
            {
                PizzaName = pizzaName,
                PizzaIngredients = new List<PizzaIngredient>()
            };

        _context.Pizzas.Add(newPizza);

        foreach (var ingredient in ingredients)
        {
            var ingredientData = _context.Ingredients.Find(ingredient.IngredientID);

            newPizza.PizzaIngredients.Add(new PizzaIngredient
                {
                    Ingredient = ingredientData
                });
        }

        _context.SaveChanges();

        NavManager.NavigateTo("/BakedPizza");
    }
}